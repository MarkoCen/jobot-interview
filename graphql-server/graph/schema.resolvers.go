package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"time"
)

// Ping is the resolver for the ping field.
func (r *mutationResolver) Ping(ctx context.Context) (*time.Time, error) {
	Ping().Set(time.Now().UTC())
	time := Ping().Get()
	return time, nil
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (*time.Time, error) {
	time := Ping().Get()
	return time, nil
}

// Ping is the resolver for the ping field.
func (r *subscriptionResolver) Ping(ctx context.Context) (<-chan *time.Time, error) {
	timeChan := make(chan *time.Time, 1)

	go func() {
		// Send the current value immediately.
		timeChan <- Ping().Get()

		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()
		for {
			select {
			case <-ctx.Done():
				close(timeChan)
				return
			case <-ticker.C:
				timeChan <- Ping().Get()
			}
		}
	}()

	return timeChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
